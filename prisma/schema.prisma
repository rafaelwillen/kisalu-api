generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
}

enum Role {
  Administrator
  Provider
  Client
}

enum ActivityState {
  Active
  OnHold
  OnDispute
  Finished
  Cancelled
  OnRevision
}

enum State {
  Available
  Draft
  Unavailable
}

enum DisputeStatus {
  UnderReview
  ResolutionProposed
  Resolved
  Escalated
}

enum FileType {
  Document
  Image
}

enum ExperienceType {
  Work
  Education
}

model User {
  id                 String           @id @default(uuid())
  firstName          String
  lastName           String
  avatarImageURL     String
  biography          String?
  birthDate          DateTime?
  gender             Gender
  auth               Auth             @relation(fields: [loginId], references: [id], onDelete: Cascade)
  loginId            String           @unique
  biddings           Bidding[]
  experienceInfo     ExperienceInfo[]
  portfolio          Portfolio[]
  reviews            Review[]
  clientActivities   Activity[]       @relation("clientActivities")
  providerActivities Activity[]       @relation("providerActivities")
  services           Service[]
  projects           Project[]
  disputes           Dispute[]
  createdCategories  Category[]
  address            Address?
}

model Auth {
  id          String   @id @default(uuid())
  email       String   @unique
  phoneNumber String?  @unique
  password    String
  isActive    Boolean?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  role        Role
  User        User?

  @@map("Login")
}

model Address {
  id          String    @id @default(uuid())
  county      String
  province    String
  addressLine String
  activity    Activity? @relation(fields: [activityId], references: [id])
  activityId  String?   @unique
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?   @unique
}

model Bidding {
  id                    String   @id @default(uuid())
  proposedValue         Int
  estimatedDeliveryDate DateTime
  coverLetter           String
  provider              User?    @relation(fields: [providerUserId], references: [id])
  providerUserId        String?
  project               Project? @relation(fields: [projectId], references: [id])
  projectId             String?
}

model ExperienceInfo {
  id              String         @id @default(uuid())
  institutionName String
  title           String
  description     String
  startDate       DateTime
  endDate         DateTime?
  type            ExperienceType
  provider        User?          @relation(fields: [providerUserId], references: [id])
  providerUserId  String?

  @@map("ProviderExperienceInfo")
}

model Portfolio {
  id              String   @id @default(uuid())
  title           String
  description     String
  projectLink     String
  projectImageURL String[]
  provider        User?    @relation(fields: [providerUserId], references: [id])
  providerUserId  String?
}

model Review {
  id           String   @id @default(uuid())
  rating       Int
  commentary   String
  client       User?    @relation(fields: [clientUserId], references: [id])
  clientUserId String?
  activity     Activity @relation(fields: [activityId], references: [id])
  activityId   String   @unique
}

model Activity {
  id                String        @id @default(uuid())
  agreedValue       Int
  state             ActivityState
  startDate         DateTime
  finishedDate      DateTime?
  createdAt         DateTime      @default(now())
  client            User?         @relation("clientActivities", fields: [clientUserId], references: [id])
  clientUserId      String?
  provider          User?         @relation("providerActivities", fields: [providerUserId], references: [id])
  providerUserId    String?
  service           Service?      @relation(fields: [linkedServiceId], references: [id])
  linkedServiceId   String?
  dispute           Dispute?
  project           Project?      @relation(fields: [linkedProjectId], references: [id])
  linkedProjectId   String?
  address           Address?
  review            Review?
  activityDetails   String?
}

model Service {
  id                String     @id @default(uuid())
  title             String
  description       String
  bannerImageURL    String?
  publishedDate     DateTime?
  createdAt         DateTime   @default(now())
  viewsCount        Int        @default(0)
  state             State      @default(Draft)
  featuredImagesURL String[]
  minimumPrice      Int
  isHighlighted     Boolean
  deliveryTime      String
  activities        Activity[]
  category          Category?  @relation(fields: [categoryId], references: [id])
  categoryId        String?
  User              User?      @relation(fields: [userId], references: [id])
  userId            String?
}

model Dispute {
  id          String        @id @default(uuid())
  title       String
  reason      String
  createdAt   DateTime      @default(now())
  resolution  String?
  updatedAt   DateTime      @default(now())
  status      DisputeStatus
  admin       User?         @relation(fields: [adminUserId], references: [id])
  adminUserId String?
  activity    Activity      @relation(fields: [activityId], references: [id])
  activityId  String        @unique
  attachments Attachment[]
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  fileType  FileType
  url       String
  Dispute   Dispute? @relation(fields: [disputeId], references: [id])
  disputeId String?
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Category {
  id             String   @id @default(uuid())
  name           String   @unique
  mainImageURL   String
  bannerImageURL String
  description    String
  createdAt      DateTime @default(now())
  slug           String   @unique

  admin          User      @relation(fields: [creatorAdminId], references: [id])
  creatorAdminId String
  services       Service[]
  projects       Project[]
}

model Project {
  id             String       @id @default(uuid())
  title          String
  description    String
  bannerImageURL String?
  publishedDate  DateTime?
  createdAt      DateTime     @default(now())
  viewsCount     Int          @default(0)
  state          State        @default(Draft)
  attachments    Attachment[]
  minimumPrice   Int
  maximumPrice   Int
  activities     Activity[]
  category       Category?    @relation(fields: [categoryId], references: [id])
  categoryId     String?
  biddings       Bidding[]
  User           User?        @relation(fields: [userId], references: [id])
  userId         String?
}

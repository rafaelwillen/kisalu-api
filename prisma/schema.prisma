generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FileType {
  Image
  Document
}

enum Gender {
  Male
  Female
}

enum DisputeState {
  UnderReview
  ResolutionProposed
  Closed
  Escalated
}

enum ActivityState {
  Active
  OnHold
  Finished
  OnDispute
  Cancelled
  OnRevision
}

enum ServiceState {
  Available
  Unavailable
}

model Client {
  id String @id @default(uuid())
  email String @unique
  password String
  firstName String
  lastName String
  phoneNumber String
  avatarImage String?
  registerDate DateTime @default(now())
  lastLogin DateTime @default(now())
  isActivated Boolean @default(true)
  gender Gender
  disputes Dispute[]
  conversations Conversation[]
  projects Project[]
  activities Activity[]
  @@map("client")
}

model Activity {
  id String @id @default(uuid())
  servicePrice Int
  state ActivityState
  startDate DateTime
  estimatedFinishDate DateTime
  finishingDate DateTime?
  linkedProject Project?
  linkedService Service?
  review Review?
  hiredProvider Provider @relation(fields: [providerId], references: [id])
  client Client @relation(fields: [clientId], references: [id])
  clientId String
  providerId String
  @@map("activity")
}

model Review {
  id String @id @default(uuid())
  revieweName String
  email String
  rating Int
  comment String
  date DateTime @default(now())
  relatedActivity Activity @relation(fields: [activityId], references: [id])
  activityId String @unique
}

model Service {
  id String @id @default(uuid())
  title  String
  description String
  featuredImagesUrls String[]
  minimumPrice Int
  bannerImage String?
  publishDate DateTime @default(now())
  viewsCount Int @default(0)
  duration String
  state ServiceState
  isHighlighted Boolean @default(false)
  isRemote Boolean @default(false)
  linkedActivity Activity? @relation(fields: [linkedActivityId], references: [id])
  linkedActivityId String? @unique
  associatedCategory Category @relation(fields: [associatedCategoryId], references: [id])
  associatedCategoryId String
  owner Provider @relation(fields: [ownerId], references: [id])
  ownerId String
}

model Category {
  id String @id @default(uuid())
  name String
  description String
  cardImageUrl String
  bannerImageUrl String
  createdBy Administrator @relation(fields: [administratorId], references: [id])
  administratorId String
  services Service[]
  projects Project[]
  relatedSkills SkillsInCategories[]
}

model Project {
  id String @id @default(uuid())
  title String
  description String
  budget Int
  bannerImage String?
  publishDate DateTime @default(now())
  viewsCount Int @default(0)
  state ServiceState
  owner Client @relation(fields: [ownerId], references: [id])
  linkedActivity Activity? @relation(fields: [linkedActivityId], references: [id])
  linkedActivityId String? @unique
  ownerId String
  biddings Bidding[]
  associatedCategory Category @relation(fields: [associatedCategoryId], references: [id])
  associatedCategoryId String
}

model Bidding {
  proposedPrice Int
  estimatedFinishDate DateTime
  coverLetter String
  provider Provider @relation(fields: [providerId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
  projectId String
  providerId String
  @@id([projectId, providerId])
}

model Provider {
  id String @id @default(uuid())
  email String @unique
  password String
  firstName String
  lastName String
  phoneNumber String
  avatarImage String?
  registerDate DateTime @default(now())
  lastLogin DateTime @default(now())
  isVerified Boolean @default(false)
  gender Gender
  disputes Dispute[]
  conversations Conversation[]
  // Many Educational Info
  // Many Experience Info
  // Many Portfolio
  // One Address
  services Service[]
  biddings Bidding[]
  activities Activity[]
  @@map("provider")
}

model Dispute {
  id String @id @default(uuid())
  title String
  reason String
  dateRaised DateTime @default(now())
  resolution String?
  status DisputeState @default(UnderReview)
  dateResolved DateTime?
  administrator Administrator @relation(fields: [administratorId], references: [id])
  client Client @relation(fields: [clientId], references: [id])
  provider Provider @relation(fields: [providerId], references: [id])
  attachments Attachment[]
  providerId String
  clientId String
  administratorId String
  @@map("dispute")
}

model Conversation {
  id String @id @default(uuid())
  client Client @relation(fields: [clientId], references: [id])
  provider Provider @relation(fields: [providerId], references: [id])
  // Many Message

  providerId String
  clientId String
  @@map("conversation")
}




model Administrator {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  createdAt DateTime @default(now())
  lastLogin DateTime @default(now())
  username String @unique
  disputes Dispute[]
  createdCategories Category[]
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String
  type FileType
  createdAt DateTime @default(now())
  dispute Dispute @relation(fields: [disputeId], references: [id])
  disputeId String
}

model SkillsInCategories {
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String
  skill Skill @relation(fields: [skillId], references: [id])
  skillId String
  @@id([categoryId, skillId])
}

model Skill {
  id String @id @default(uuid())
  name String
  relatedCategories SkillsInCategories[]
}